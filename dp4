Given an array arr[] of length N and an integer X, the task is to find the number of subsets with a sum equal to X.

Examples: 

Input: arr[] = {1, 2, 3, 3}, X = 6 
Output: 3 
All the possible subsets are {1, 2, 3}, 
{1, 2, 3} and {3, 3}

Input: arr[] = {1, 1, 1, 1}, X = 1 
Output: 4 
CODE: BOTTOM-UP APPROACH
#include <iostream>

using namespace std;
int CountsubsetSum(int arr[],int sum,int dp[][100],int n)
{  
    if(sum==0)
    {
        return 1;
    }
    if(n==0)
    {
         return 0;
    }
    if(arr[n-1]<=sum)
    {
       return dp[n][sum]=CountsubsetSum(arr,sum-arr[n-1],dp,n-1) +CountsubsetSum(arr,sum,dp,n-1);
    }
     else
     return dp[n][sum]=CountsubsetSum(arr,sum,dp,n-1);
}

int main() {
    int a[100];
    int t[100][100];
    
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int sum;
    cin>>sum;
    
    cout<<CountsubsetSum(a,sum,t,n);
}



CODE: TOP-DOWN APPPROACH

#include <iostream>

using namespace std;

int main() {
    int n,sum,a[100],dp[100][100];
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    cin>>sum;
    for(int i=1;i<=n;i++)
    {
        dp[i][0]=1;
    }
    for(int i=1;i<=sum;i++)
    {
        dp[0][sum]=0;
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=sum;j++)
        {
            if(a[i-1]<=j)
            {
                dp[i][j]=dp[i-1][j]+dp[i-1][j-a[i-1]];
            }
            else
            {
                dp[i][j]=dp[i-1][j-1];
            }
        }
    }
    cout<<dp[n][sum] << endl;
}
