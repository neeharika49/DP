#Determine whether a given set can be partitioned into two subsets such that the sum of elements in both subsets is the same. 

Examples: 

arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets.
CODE: BOTTOM-UP approach
#include <iostream>

using namespace std;
bool subsetSum(int arr[],int n,int sum,bool dp[][100])
{
    if(n==0)
    {
        return false;
    }
    if(sum==0)
    {
        return true;
    }
    if(arr[n-1]<=sum)
    {
        return dp[n][sum]=subsetSum(arr,n-1,sum-arr[n-1],dp) ||subsetSum(arr,n-1,sum,dp);
    }
    else
    
        return dp[n][sum]=subsetSum(arr,n-1,sum,dp);
    
}
bool equalSumPartition(int a[],int n,bool dp[][100])
{
    int sum=0;
    for(int i=0;i<n;i++)
    {
        sum=sum+a[i];
    }
    if(sum%2!=0)
    {
        return false;
    }
    else 
    
        return subsetSum(a,n,sum/2,dp);
    
}
int main() {
    int n;
    cin>>n;
    int arr[100];
    bool dp[100][100];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cout<<equalSumPartition(arr,n,dp);
}
