#Given a set of items, each with a weight and a value,determine the number of each item to include in a collection so that the total weight is less than or equal to a given 
#limit and the total value is as large as possible
# first line no.of inputs
# second line capacity
# weight of items
# values
INPUT:  3 
        7
        3 4 7
        1 5 2
#include <iostream>

using namespace std;
#bottom-up
int knapsack(int wt[],int val[],int W,int n,int **dp)
{
    //base case
    if(n==0 || W==0)
    {
        return 0;
    }
    //choice
   
   
    if(dp[n][W]!=-1)
    {
        return dp[n][W];
    }
    if(wt[n-1]<=W)
    {
        return dp[n][W]=max(val[n-1]+knapsack(wt,val,W-wt[n-1],n-1,dp),knapsack(wt,val,W,n-1,dp));
    }
    else 
    
      return dp[n][W]=knapsack(wt,val,W,n-1,dp);   
    
}
#top-down

int main() {
    int dp[100][100];
    int wt[100],val[100],n,W;
    cin>>n>>W;
    for(int i=0;i<n;i++)
    {
        cin>>wt[i];
    }
    for(int i=0;i<n;i++)
    {
        cin>>val[i];
    }
    
    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<W+1;j++)
        {
            if(wt[i-1]<=j)
            {
                dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
            }
            else
            {
                dp[i][j]=dp[i-1][j];
            }
        }
    }

    cout<<dp[n][W];
}
