#Given a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 
CODE:
#bottom-up approach
#include <iostream>

using namespace std;
bool subsetSum(int arr[],int sum,bool dp[][100],int n)
{  
    if(sum==0)
    {
        return true;
    }
    if(n==0)
    {
         return false;
    }
    if(arr[n-1]<=sum)
    {
       return dp[n][sum]=subsetSum(arr,sum-arr[n-1],dp,n-1) || subsetSum(arr,sum,dp,n-1);
    }
     else
     return dp[n][sum]=subsetSum(arr,sum,dp,n-1);
}

int main() {
    int a[100];
    bool t[100][100];
    
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int sum;
    cin>>sum;
    for (int i=0;i<n;i++)
    {
        for(int j=0;j<sum;j++)
        {
            t[i][j]=false;
        }
    }
    cout<<subsetSum(a,sum,t,n);
}


TOP-DOWN APPROACH

#include <iostream>

using namespace std;


int main() {
    int n,sum;
    cin>>n;
    int arr[100];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cin>>sum;
    bool dp[100][100];
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=true;
    }
    for(int i=0;i<=sum;i++)
    {
        dp[0][i]=false;
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=sum;j++)
        {
            if(arr[i-1]<=j)
            {
                dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
            }
            else
            {
             dp[i][j]=dp[i-1][j];
            }
        }
    }
    cout<<dp[n][sum];
}
